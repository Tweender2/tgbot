# import telebot
# from telebot import types

# API_TOKEN = '7937646870:AAH1f-_vPaebCHVtl6VLit1YBMizY82JNl0'  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à API —Ç–æ–∫–µ–Ω
# bot = telebot.TeleBot(API_TOKEN)

# user_states = {}
# processing_active = {}

# def set_user_state(chat_id, state):
#     user_states[chat_id] = state
#     processing_active[chat_id] = True

# def clear_user_state(chat_id):
#     if chat_id in user_states:
#         del user_states[chat_id]
#     processing_active[chat_id] = False

# @bot.message_handler(commands=['start'])
# def start(message):
#     show_main_menu(message.chat.id)

# def show_main_menu(chat_id):
#     keyboard = types.InlineKeyboardMarkup()
#     keyboard.add(types.InlineKeyboardButton('–î–æ–≥–æ–≤–æ—Ä —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —Ä–µ–∫–ª–∞–º—ãüìï', callback_data='menu_choice'))
#     keyboard.add(types.InlineKeyboardButton('–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∫–ª–∞–º—ãüìô', callback_data='Pattern2'))
#     keyboard.add(types.InlineKeyboardButton('–í–≤–µ–¥–µ–Ω–∏–µ —Ä–µ–∫–ª–∞–º—ãüìó', callback_data='Pattern3'))
#     keyboard.add(types.InlineKeyboardButton('–î–æ–ø. —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ –∫ –¥–æ–≥–æ–≤–æ—Ä—Éüìò', callback_data='Pattern4'))
#     bot.send_message(chat_id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å —à–∞–±–ª–æ–Ω:", reply_markup=keyboard)

# @bot.callback_query_handler(func=lambda call: True)
# def handle_query(call):
#     chat_id = call.message.chat.id
#     if call.data == 'main_menu':
#         clear_user_state(chat_id)
#         show_main_menu(chat_id)
#     elif call.data.startswith('Pattern'):
#         clear_user_state(chat_id)  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –Ω–æ–≤–æ–≥–æ –≤—ã–±–æ—Ä–∞
#         set_user_state(chat_id, call.data)  # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —à–∞–±–ª–æ–Ω–∞
        
#         keyboard = types.InlineKeyboardMarkup()
#         btn_back = types.InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é‚Ü©Ô∏è", callback_data='main_menu')
#         keyboard.add(btn_back)
#         bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞:", reply_markup=keyboard)
        
#         # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞
#         print(call.data, processing_active.get(chat_id))
#         bot.register_next_step_handler(call.message, process_document_name)

# def process_document_name(message):
#     chat_id = message.chat.id
#     pattern = user_states.get(chat_id)  # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —à–∞–±–ª–æ–Ω –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

#     print(pattern, processing_active.get(chat_id))
#     if processing_active.get(chat_id, False):
#         clear_user_state(chat_id)  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤–≤–æ–¥–∞
#         bot.send_message(chat_id, f'–í—ã –≤–≤–µ–ª–∏: {message.text} {pattern}')

# if __name__ == "__main__":
#     bot.polling(none_stop=True)

import telebot
from telebot import types

API_TOKEN = '7937646870:AAH1f-_vPaebCHVtl6VLit1YBMizY82JNl0'
bot = telebot.TeleBot(API_TOKEN)

user_states = {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

@bot.message_handler(commands=['start'])
def start(message):
    welcome_message = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é."
    markup = types.InlineKeyboardMarkup()
    btn_name = types.InlineKeyboardButton("–í–≤–æ–¥ –∏–º–µ–Ω–∏", callback_data="input_name")
    btn_surname = types.InlineKeyboardButton("–í–≤–æ–¥ —Ñ–∞–º–∏–ª–∏–∏", callback_data="input_surname")
    markup.add(btn_name, btn_surname)
    bot.send_message(message.chat.id, welcome_message, reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data in ["input_name", "input_surname"])
def ask_for_input(call):
    user_states[call.message.chat.id] = call.data  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    prompt = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ " + ("–∏–º—è:" if call.data == "input_name" else "—Ñ–∞–º–∏–ª–∏—é:")
    markup = types.InlineKeyboardMarkup()
    btn_menu = types.InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="return_to_menu")
    markup.add(btn_menu)
    bot.send_message(call.message.chat.id, prompt, reply_markup=markup)

@bot.message_handler(func=lambda message: message.chat.id in user_states)
def handle_input(message):
    user_input = message.text
    if len(user_input) > 10:
        text = "–û—à–∏–±–∫–∞: –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –º–µ–Ω–µ–µ 10 —Å–∏–º–≤–æ–ª–æ–≤."
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é"
        markup = types.InlineKeyboardMarkup()
        btn_menu = types.InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="return_to_menu")
        markup.add(btn_menu)
        bot.send_message(message.chat.id, text, reply_markup=markup)
        return  # –û–∂–∏–¥–∞–µ–º –Ω–æ–≤—ã–π –≤–≤–æ–¥ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –º–æ–∂–µ–º —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –µ–≥–æ
    name_or_surname = user_states[message.chat.id]
    text = f"–°–ø–∞—Å–∏–±–æ! –í—ã –≤–≤–µ–ª–∏ {'–∏–º—è' if name_or_surname == 'input_name' else '—Ñ–∞–º–∏–ª–∏—é'}: {user_input}"
    del user_states[message.chat.id]  # –£–¥–∞–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    markup = types.InlineKeyboardMarkup()
    btn_menu = types.InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="return_to_menu")
    markup.add(btn_menu)
    bot.send_message(message.chat.id, text, reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == "return_to_menu")
def return_to_menu(call):
    start(call.message)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å—Ç–∞—Ä—Ç–æ–≤–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é

if __name__ == '__main__':
    bot.polling(none_stop=True)


