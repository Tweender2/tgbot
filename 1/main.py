import os
import telebot
from replace_text import replace_text_in_docx
from get_pattern_message import get_pattern_message
from telebot import types
import re
import shutil

API_TOKEN = '7937646870:AAH1f-_vPaebCHVtl6VLit1YBMizY82JNl0'  
bot = telebot.TeleBot(API_TOKEN)

pattern_file_IP = 'Pattern/–ò–ü 2024 –®–∞–±–ª–æ–Ω –î–æ–≥–æ–≤–æ—Ä ‚Ññ00-00 –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–∞—è —Ä–µ–∫–ª–∞–º–∞'
pattern_file_OOO = 'Pattern/–û–û–û 2024 –®–∞–±–ª–æ–Ω –î–æ–≥–æ–≤–æ—Ä ‚Ññ00-00 –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–∞—è —Ä–µ–∫–ª–∞–º–∞'
pattern_file2 = 'Pattern/2024 –®–∞–±–ª–æ–Ω –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ 1 (00-00) –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞'
pattern_file3 = 'Pattern/2024 –®–∞–±–ª–æ–Ω –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ 2 (00-00) –í–µ–¥–µ–Ω–∏–µ'
pattern_file4_IP = 'Pattern/–≤–µ—Ä–Ω –î–æ–ø. —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ –∫ –¥–æ–≥–æ–≤–æ—Ä—É 1'
pattern_file4_OOO = 'Pattern/–ø—Ä–∏–º–µ—Ä –î–æ–ø.—Å–æ–≥–ª–∞—à–µ–Ω–∏–µ –∫ –î–æ–≥–æ–≤–æ—Ä—É'

photoIP = [
    'Photo/Choice_1/List1.jpg',
    'Photo/Choice_1/List2.jpg',
    'Photo/Choice_1/List3.jpg',
    'Photo/Choice_1/List4.jpg',
    'Photo/Choice_1/List5.jpg',
    'Photo/Choice_1/List6.jpg',
    'Photo/Choice_1/List7.jpg'
]
photoOOO = [
    'Photo/Choice_2/List1.jpg',
    'Photo/Choice_2/List2.jpg',
    'Photo/Choice_2/List3.jpg',
    'Photo/Choice_2/List4.jpg',
    'Photo/Choice_2/List5.jpg',
    'Photo/Choice_2/List6.jpg',
    'Photo/Choice_2/List7.jpg'
]
photo2 = 'Photo/Pattern_2/List1.png'
photo3 = 'Photo/Pattern_3/List1.png'
photo4_IP = 'Photo/Pattern_4/List1.jpg'
photo4_OOO = 'Photo/Pattern_4/List2.jpg'

manul = """–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ PatternBot! üéâ –≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–æ–≤ –¥–æ–≥–æ–≤–æ—Ä–æ–≤ —á–µ—Ä–µ–∑ Telegram. –î–∞–Ω–Ω—ã–π –±–æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã –¥–æ–≥–æ–≤–æ—Ä–æ–≤ –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –ø—Ä–æ—Å—Ç–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –≤–≤–æ–¥–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö. –î–∞–≤–∞–π—Ç–µ —Ä–∞–∑–±–µ—Ä–µ–º, –∫–∞–∫ –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º –∏ –∫–∞–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –æ–Ω –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç.

–ö–∞–∫ –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º:
1Ô∏è‚É£–í—ã–±–æ—Ä —à–∞–±–ª–æ–Ω–∞:

–í –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –Ω—É–∂–Ω—ã–π —à–∞–±–ª–æ–Ω –¥–æ–∫—É–º–µ–Ω—Ç–∞, –Ω–∞–∂–∞–≤ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É. –î–æ—Å—Ç—É–ø–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã –≤–∫–ª—é—á–∞—é—Ç:
–î–æ–≥–æ–≤–æ—Ä —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —Ä–µ–∫–ª–∞–º—ãüìï
–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∫–ª–∞–º—ãüìô
–í–≤–µ–¥–µ–Ω–∏–µ —Ä–µ–∫–ª–∞–º—ãüìó
–î–æ–ø. —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ –∫ –¥–æ–≥–æ–≤–æ—Ä—Éüìò
   
–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö:

–ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —à–∞–±–ª–æ–Ω–∞ –≤–∞–º –±—É–¥–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–æ –≤–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º—ã–º–∏ –ø–æ–ª—è–º–∏. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–æ–º–µ—Ä –¥–æ–≥–æ–≤–æ—Ä–∞, –¥–∞—Ç–∞, –§–ò–û –∏ —Ç.–¥.).
–ë–æ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç —Ñ–æ—Ä–º–∞—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è "üìú–§–æ—Ä–º–∞—Ç:" –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç—å. –ù–∞–ø—Ä–∏–º–µ—Ä —Ç–∞–∫:
 
üìú–§–æ—Ä–º–∞—Ç:
1.–ù–æ–º–µ—Ä –¥–æ–≥–æ–≤–æ—Ä–∞: 01-25
2.–î–∞—Ç–∞: 01.01.2025
3.–°—Ç–æ–∏–º–æc—Ç—å: 15000   
4.–î–æ–ª–∂–Ω–æ—Å—Ç—å –∑–∞–∫–∞–∑—á–∏–∫–∞: –ò–ü –ù–∏–∫–∏—Ç–∏–Ω –ù.–ò
5.–ü–æ–ª–Ω–æ–µ –§–ò–û –∑–∞–∫–∞–∑—á–∏–∫–∞: –ù–∏–∫–∏—Ç–∏–Ω –ù–∏–∫–∏—Ç–∞ –ò–≤–∞–Ω–æ–≤–∏—á

2Ô∏è‚É£–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞:

–ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞ –±–æ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç –≤–∞–º –≥–æ—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ .docx.

3Ô∏è‚É£–û—à–∏–±–∫–∏ –≤–≤–æ–¥–∞:

–ï—Å–ª–∏ –≤—ã –¥–æ–ø—É—Å—Ç–∏—Ç–µ –æ—à–∏–±–∫—É –ø—Ä–∏ –≤–≤–æ–¥–µ –¥–∞–Ω–Ω—ã—Ö, –±–æ—Ç —Å–æ–æ–±—â–∏—Ç –æ –Ω–µ–π –∏ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç –≤–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ –∑–∞–Ω–æ–≤–æ. –ù–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ –≤—ã –≤–≤–µ–¥–µ—Ç–µ –Ω–æ–º–µ—Ä –¥–æ–≥–æ–≤–æ—Ä–∞ –≤ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ, –±–æ—Ç —É–∫–∞–∂–µ—Ç –Ω–∞ –æ—à–∏–±–∫—É –∏ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–Ω–æ–≤–æ.

4Ô∏è‚É£–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é:

–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é".

5Ô∏è‚É£–ü—Ä–∏–º–µ—Ä —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º:

–í—ã –∑–∞–ø—É—Å–∫–∞–µ—Ç–µ –±–æ—Ç–∞ –∏ –≤–∏–¥–∏—Ç–µ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.
–í—ã –≤—ã–±–∏—Ä–∞–µ—Ç–µ "–î–æ–≥–æ–≤–æ—Ä —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —Ä–µ–∫–ª–∞–º—ãüìï".
–ó–∞—Ç–µ–º –≤—ã–±–∏—Ä–∞–µ—Ç–µ "–ò–ü" –∏–ª–∏ "–û–û–û".
–ë–æ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –≤–∞–º —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è.
–í—ã –≤–≤–æ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —Ñ–æ—Ä–º–∞—Ç–æ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ –∏—Ö –±–æ—Ç—É.
–ë–æ—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–∞–Ω–Ω—ã–µ, –∏ –µ—Å–ª–∏ –≤—Å–µ –≤ –ø–æ—Ä—è–¥–∫–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤–∞–º –≥–æ—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç.

6Ô∏è‚É£–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏:

–ù–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É '–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—èüìí' –≤—ã —Å–Ω–æ–≤–∞ –º–æ–∂–µ—Ç–µ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –¥–∞–Ω–Ω—ã–º –ø—É—Ç–µ–≤–æ–¥–∏—Ç–µ–ª–µ–º –µ—â–µ —Ä–∞–∑.
"""

# —Å—Ç–∞—Ä—Ç
@bot.message_handler(commands=['start'])
def start(message):
    welcome_message = bot.send_message(message.chat.id, manul)
    bot.pin_chat_message(message.chat.id, welcome_message.message_id)
    show_main_menu(message.chat.id)


user_states = {}
processing_active = {}
states = {}

def clear_state(chat_id):
    """–û—á–∏—â–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    if chat_id in states:
        del states[chat_id]

def set_user_state(chat_id, state):
    user_states[chat_id] = state
    processing_active[chat_id] = True
def clear_user_state(chat_id):
    if chat_id in user_states:
        del user_states[chat_id]
    processing_active[chat_id] = False

def get_user_state_inside(chat_id):
    try:
        print(user_states[chat_id])
        if user_states[chat_id] is not None:
            return user_states[chat_id]
    except:
        print("—Ç—É—Ç –ø—É—Å—Ç–æ :(")

# –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
def show_main_menu(chat_id):
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton('–î–æ–≥–æ–≤–æ—Ä —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —Ä–µ–∫–ª–∞–º—ãüìï', callback_data='menu_choice'))
    keyboard.add(types.InlineKeyboardButton('–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∫–ª–∞–º—ãüìô', callback_data='Pattern2'))
    keyboard.add(types.InlineKeyboardButton('–í–≤–µ–¥–µ–Ω–∏–µ —Ä–µ–∫–ª–∞–º—ãüìó', callback_data='Pattern3'))
    keyboard.add(types.InlineKeyboardButton('–î–æ–ø. —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ –∫ –¥–æ–≥–æ–≤–æ—Ä—Éüìò', callback_data='menu_choice1'))
    keyboard.add(types.InlineKeyboardButton('–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—èüìí', callback_data='show_manual'))
    bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å —à–∞–±–ª–æ–Ω:", reply_markup=keyboard)

def menu_choice(chat_id):
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton('–ò–ü', callback_data='Choice1'))
    keyboard.add(types.InlineKeyboardButton('–û–û–û', callback_data='Choice2'))
    keyboard.add(types.InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é‚Ü©Ô∏è", callback_data='main_menu'))
    bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –≤–∞—Å —á–∞—Å—Ç—å:", reply_markup=keyboard)

def menu_choice1(chat_id):
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton('–ò–ü', callback_data='Choice_1'))
    keyboard.add(types.InlineKeyboardButton('–û–û–û', callback_data='Choice_2'))
    keyboard.add(types.InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é‚Ü©Ô∏è", callback_data='main_menu'))
    bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –≤–∞—Å —á–∞—Å—Ç—å:", reply_markup=keyboard)

# –ø–µ—Ä–µ—Ö–æ–¥—ã —á–µ—Ä–µ–∑ callback_data
@bot.callback_query_handler(func=lambda call: True)
def handle_query(call):
    chat_id = call.message.chat.id

    # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è chat_id —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if chat_id not in states:
        states[chat_id] = {}

    if call.data == 'main_menu':
        states[chat_id] = {"main_menu": False, "Choice1": False, "Choice2": False,
                           "Choice_1": False, "Choice_2": False,
                           "Pattern2": False, "Pattern3": False, "Pattern4": False}
        states[chat_id]["main_menu"] = True
        name_file = get_user_state_inside(chat_id)
        try:
            if "new_file_path" in name_file:
                try:
                    os.remove(name_file.get('new_file_path'))
                except:
                    print("—Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω, —É–ø—Å")
        except:
            print("—Ç—É—Ç —Ç–æ–∂–µ –ø—É—Å—Ç–æ ;(")
        clear_user_state(chat_id)  
        processing_active[chat_id] = False  
        show_main_menu(chat_id)

        
    elif call.data.startswith('Pattern'):
        states[chat_id] = {"Choice1": False, "Choice2": False,
                           "Choice_1": False, "Choice_2": False,
                        "Pattern2": False, "Pattern3": False, "Pattern4": False}
        clear_user_state(chat_id)  
        set_user_state(chat_id, call.data)  

        process_document_name(chat_id)
    
    elif call.data == 'show_manual':
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é‚Ü©Ô∏è", callback_data='main_menu'))
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        bot.send_message(chat_id, manul, reply_markup=keyboard)

    if call.data == 'menu_choice':
        states[chat_id] = {"Choice1": False, "Choice2": False,
                           "Choice_1": False, "Choice_2": False,
                        "Pattern2": False, "Pattern3": False, "Pattern4": False}
        clear_user_state(chat_id)  
        menu_choice(chat_id)
    elif call.data.startswith('Choice') and not call.data.startswith('Choice_'):
        states[chat_id] = {"Choice1": False, "Choice2": False,
                           "Choice_1": False, "Choice_2": False,
                        "Pattern2": False, "Pattern3": False, "Pattern4": False}
        clear_user_state(chat_id)  
        set_user_state(chat_id, call.data) 

        process_document_name(chat_id)

    if call.data == 'menu_choice1':
        states[chat_id] = {"Choice1": False, "Choice2": False,
                           "Choice_1": False, "Choice_2": False,
                        "Pattern2": False, "Pattern3": False, "Pattern4": False}
        clear_user_state(chat_id)  
        menu_choice1(chat_id)
    elif call.data.startswith('Choice_'):
        states[chat_id] = {"Choice1": False, "Choice2": False,
                           "Choice_1": False, "Choice_2": False,
                        "Pattern2": False, "Pattern3": False, "Pattern4": False}
        clear_user_state(chat_id)  
        set_user_state(chat_id, call.data) 

        process_document_name(chat_id)

# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –æ—à–∏–±–∫–∏
def validate_input(pattern, line, expected_type, line_number):
    if expected_type == "–Ω–æ–º–µ—Ä":
        if not re.match(r'^\d{2}-\d{2}', line):
            return f"–û—à–∏–±–∫–∞ –≤ —Å—Ç—Ä–æ–∫–µ {line_number}: –ù–æ–º–µ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ 00-00."
    elif expected_type == "–¥–∞—Ç–∞":
        if not re.match(r'^\d{2}\.\d{2}\.\d{4}', line):
            return f"–û—à–∏–±–∫–∞ –≤ —Å—Ç—Ä–æ–∫–µ {line_number}: –î–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–¥.–º–º.–≥–≥–≥–≥."
    elif expected_type == "—Å—Ç–æ–∏–º–æ—Å—Ç—å":
        if not re.match(r'^\d+(\.\d{1,2})?', line):
            return f"–û—à–∏–±–∫–∞ –≤ —Å—Ç—Ä–æ–∫–µ {line_number}: –°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1000 –∏–ª–∏ 1000.00)."
    elif expected_type == "—Ç–µ–∫—Å—Ç":
        if pattern == 'Choice1' and not line:
            return None
        if not line:
            if line_number != 17:
                return f"–û—à–∏–±–∫–∞ –≤ —Å—Ç—Ä–æ–∫–µ {line_number}: –≠—Ç–æ –ø–æ–ª–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º."
    elif expected_type == "–§–ò–û":
        if not re.match(r'^[–ê-–Ø–Å][–∞-—è—ë]+\s[–ê-–Ø–Å][–∞-—è—ë]+\s[–ê-–Ø–Å][–∞-—è—ë]+', line):
            return f"–û—à–∏–±–∫–∞ –≤ —Å—Ç—Ä–æ–∫–µ {line_number}: –§–ò–û –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç—Ä–∏ —á–∞—Å—Ç–∏ (—Ñ–∞–º–∏–ª–∏—è, –∏–º—è, –æ—Ç—á–µ—Å—Ç–≤–æ)."
    return None

# –í—ã–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
def get_message_for_pattern(chat_id):
    pattern = user_states.get(chat_id)
    if pattern == 'Choice1':
        return 'Pattern/–î–æ–≥–æ–≤–æ—Ä —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —Ä–µ–∫–ª–∞–º—ã'
    elif pattern == 'Choice2':
        return 'Pattern/–î–æ–≥–æ–≤–æ—Ä —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —Ä–µ–∫–ª–∞–º—ã'
    elif pattern == 'Pattern2':
        return 'Pattern/–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ1 —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∫–ª–∞–º—ã'
    elif pattern == 'Pattern3':
        return 'Pattern/–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ2 –≤–≤–µ–¥–µ–Ω–∏–µ —Ä–µ–∫–ª–∞–º—ã'
    if pattern == 'Choice_1':
        return 'Pattern/–ò–ü –¥–æ–ø. —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ –∫ –¥–æ–≥–æ–≤–æ—Ä—É'
    elif pattern == 'Choice_2':
        return 'Pattern/–¥–æ–ø. —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ –∫ –¥–æ–≥–æ–≤–æ—Ä—É'

# –í—ã–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è –∏—Å—Ö–æ–¥–Ω–∏–∫–∞
def get_message_for_exodus_pattern(chat_id):
    pattern = user_states.get(chat_id)
    if pattern == 'Choice1':
        return pattern_file_IP + '.docx'
    elif pattern == 'Choice2':
        return pattern_file_OOO + '.docx'
    elif pattern == 'Pattern2':
        return pattern_file2 + '.docx'
    elif pattern == 'Pattern3':
        return pattern_file3 + '.docx'
    if pattern == 'Choice_1':
        return pattern_file4_IP + '.docx'
    elif pattern == 'Choice_2':
        return pattern_file4_OOO + '.docx'

def def_old_info_list(chat_id):
    if user_states != {}:
        pattern = user_states.get(chat_id)
        pattern = pattern["pattern"]
    else:
        pattern = slovar.get(chat_id)
        pattern = pattern["pattern"]
    if pattern == 'Choice1':
        old_info_list = ["description", "Name_site", "NumberAgreement", "full_date", "<–§–ò–û>", 
                        "<–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –∞–¥—Ä–µ—Å>", "PhysicalAddress", "<–û–ì–†–ù–ò–ü>", "<–ò–ù–ù>", 
                        "<–ë–∞–Ω–∫–æ–≤—Å–∫–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã>", "<—Ä/—Å>", "<–∫/—Å>", "<–ë–ò–ö>", "<–¢–µ–ª–µ—Ñ–æ–Ω>", "email"]
        return old_info_list
    elif pattern == 'Choice2':
        old_info_list = ["description", "Name_site", "NumberAgreement", "full_date", "<–û–û–û -—É—Å—Ç–∞–≤>", "post",
                        "FIO", "<–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –∞–¥—Ä–µ—Å>", "PhysicalAddress", "<–û–ì–†–ù–ò–ü>", "<–ò–ù–ù>", 
                        "<–ë–∞–Ω–∫–æ–≤—Å–∫–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã>", "<—Ä/—Å>", "<–∫/—Å>", "<–ë–ò–ö>", "<–¢–µ–ª–µ—Ñ–æ–Ω>", "email"]
        return old_info_list
    elif pattern == 'Pattern2':
        old_info_list = ["<–ù–æ–º–µ—Ä –¥–æ–≥–æ–≤–æ—Ä–∞>", "<–î–∞—Ç–∞>", "<–¶–µ–Ω–∞>", "post", "full_name"]
        return old_info_list
    elif pattern == 'Pattern3':
        old_info_list = ["NumberAgreement", "<–î–∞—Ç–∞>", "<–¶–µ–Ω–∞>", "post", "full_name"]
        return old_info_list
    elif pattern == 'Choice_1':
        old_info_list = ["Povod", "NumberAgreement", "Agr", "<–ê—Ç–∞–¥>", "<–î–∞—Ç–∞>",
                         "–û–ì–†–ù–ò–ü", "FIO", "Price", "<–≠–Ω—Ç—Ä–∏>"]
        return old_info_list
    elif pattern == 'Choice_2':
        old_info_list = ["Povod", "NumberAgreement", "Agr", "<–ê—Ç–∞–¥>", "<–î–∞—Ç–∞>", 
                        "Organization", "OST", "FIO", "Price", "<–≠–Ω—Ç—Ä–∏>"]
        return old_info_list

# –í—ã–≤–æ–¥ —Ñ–æ—Ä–º–∞—Ç–∞ —à–∞–±–ª–æ–Ω–∞ —Å —Ñ–æ—Ç–∫–∞–º–∏
def send_template(chat_id, keyboard):
    if user_states != {}:
        pattern = user_states.get(chat_id)
        pattern = pattern["pattern"]
    else:
        pattern = slovar.get(chat_id)
        pattern = pattern["pattern"]
    if pattern == 'Choice1':
        media = [types.InputMediaPhoto(types.InputFile(photo_path)) for photo_path in photoIP]
        bot.send_media_group(chat_id, media)
        message = bot.send_message(chat_id, text=get_pattern_message(pattern), reply_markup=keyboard)
    if pattern == 'Choice2':
        media = [types.InputMediaPhoto(types.InputFile(photo_path)) for photo_path in photoOOO]
        bot.send_media_group(chat_id, media)
        message = bot.send_message(chat_id, text=get_pattern_message(pattern), reply_markup=keyboard)
    elif pattern == 'Pattern2':
        message = bot.send_photo(chat_id, photo=open(photo2, 'rb'), caption=get_pattern_message(pattern), reply_markup=keyboard)
    elif pattern == 'Pattern3':
        message = bot.send_photo(chat_id, photo=open(photo3, 'rb'), caption=get_pattern_message(pattern), reply_markup=keyboard)
    elif pattern == 'Choice_1':
        message = bot.send_photo(chat_id, photo=open(photo4_IP, 'rb'), caption=get_pattern_message(pattern), reply_markup=keyboard)
    elif pattern == 'Choice_2':
        message = bot.send_photo(chat_id, photo=open(photo4_OOO, 'rb'), caption=get_pattern_message(pattern), reply_markup=keyboard)
    return message

def process_document_name(chat_id):
    print(user_states)
    pattern = user_states.get(chat_id)
    states[chat_id][pattern] = True
    states[chat_id]["main_menu"] = False

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤–µ—Ä–Ω—É–ª—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –º–µ–Ω—é
    if not processing_active.get(chat_id, False):
        return

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É —Ñ–∞–π–ª—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–∞
    template_file = get_message_for_exodus_pattern(chat_id)
    new_file_path = get_message_for_pattern(chat_id)

    # –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª —Å –Ω–æ–≤—ã–º –∏–º–µ–Ω–µ–º
    try:
        print("–û—Ä–∏–≥. –Ω–∞–∑–≤–∞–Ω–∏–µ: ", template_file)
        print("–ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: ", new_file_path)
        shutil.copy(template_file, f'{new_file_path}.docx')
    except Exception as e:
        bot.send_message(chat_id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞: {str(e)}")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Ç—å –∫ –Ω–æ–≤–æ–º—É —Ñ–∞–π–ª—É –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_states[chat_id] = {'pattern': pattern, 'new_file_path': new_file_path}
    print(user_states)

    # –í—ã–≤–æ–¥–∏–º —à–∞–±–ª–æ–Ω –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è
    keyboard = telebot.types.InlineKeyboardMarkup()
    btn_back = telebot.types.InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é‚Ü©Ô∏è", callback_data='main_menu')
    keyboard.add(btn_back)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —à–∞–±–ª–æ–Ω –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞
    message = send_template(chat_id, keyboard)
    bot.register_next_step_handler(message, filling_out_the_document)

slovar = {}

def filling_out_the_document(message):
    chat_id = message.chat.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤–µ—Ä–Ω—É–ª—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –º–µ–Ω—é
    if not processing_active.get(chat_id, False):
        print("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –≤—ã—à–µ–ª")
        return

    try:
        dict_text = user_states[chat_id]
        new_file_path = dict_text["new_file_path"]
        pattern = dict_text["pattern"]
        
        slovar[chat_id] = {'pattern': pattern, 'new_file_path': new_file_path}
    except:
        print(user_states)

    if processing_active.get(chat_id, False):
        old_info_list = def_old_info_list(chat_id)
        clear_user_state(chat_id)  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤–≤–æ–¥–∞
        dict_text = slovar[chat_id]
        new_file_path = dict_text["new_file_path"]
        pattern = dict_text["pattern"]

        user_input = message.text
        if user_input is None or user_input.strip() == "":
            text = "–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –∑–∞–ø—Ä–æ—Å —Å–Ω–æ–≤–∞."
            send_pattern_message(chat_id, text)
            return
        
        lines = user_input.split('\n')
        new_info_list = []
        error_messages = []

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–∂–∏–¥–∞–µ–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ —Ç–∏–ø—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —à–∞–±–ª–æ–Ω–∞
        if pattern == 'Choice1':
            expected_count = 15
            expected_types = ["—Ç–µ–∫—Å—Ç", "—Ç–µ–∫—Å—Ç", "–Ω–æ–º–µ—Ä", "–¥–∞—Ç–∞", "–§–ò–û", "—Ç–µ–∫—Å—Ç", "—Ç–µ–∫—Å—Ç", "—Ç–µ–∫—Å—Ç",
                            "—Ç–µ–∫—Å—Ç", "—Ç–µ–∫—Å—Ç", "—Ç–µ–∫—Å—Ç", "—Ç–µ–∫—Å—Ç", "—Ç–µ–∫—Å—Ç", "—Ç–µ–∫—Å—Ç", "—Ç–µ–∫—Å—Ç"]
        elif pattern == 'Choice2':
            expected_count = 17
            expected_types = ["—Ç–µ–∫—Å—Ç", "—Ç–µ–∫—Å—Ç", "–Ω–æ–º–µ—Ä", "–¥–∞—Ç–∞", "—Ç–µ–∫—Å—Ç", "—Ç–µ–∫—Å—Ç", "–§–ò–û", "—Ç–µ–∫—Å—Ç",
                                "—Ç–µ–∫—Å—Ç", "—Ç–µ–∫—Å—Ç", "—Ç–µ–∫—Å—Ç", "—Ç–µ–∫—Å—Ç", 
                                "—Ç–µ–∫—Å—Ç", "—Ç–µ–∫—Å—Ç", "—Ç–µ–∫—Å—Ç", "—Ç–µ–∫—Å—Ç", "—Ç–µ–∫—Å—Ç"]
        elif pattern == 'Pattern2':
            expected_count = 5
            expected_types = ["–Ω–æ–º–µ—Ä", "–¥–∞—Ç–∞", "—Å—Ç–æ–∏–º–æ—Å—Ç—å", "—Ç–µ–∫—Å—Ç", "–§–ò–û"]
        elif pattern == 'Pattern3':
            expected_count = 5
            expected_types = ["–Ω–æ–º–µ—Ä", "–¥–∞—Ç–∞", "—Å—Ç–æ–∏–º–æ—Å—Ç—å", "—Ç–µ–∫—Å—Ç", "–§–ò–û"]
        elif pattern == 'Choice_1':
            expected_count = 9
            expected_types = ["—Ç–µ–∫—Å—Ç", "—Ç–µ–∫—Å—Ç", "–Ω–æ–º–µ—Ä", "–¥–∞—Ç–∞", "–¥–∞—Ç–∞", "—Ç–µ–∫—Å—Ç", "–§–ò–û", "—Å—Ç–æ–∏–º–æ—Å—Ç—å", "–¥–∞—Ç–∞"]
        elif pattern == 'Choice_2':
            expected_count = 10
            expected_types = ["—Ç–µ–∫—Å—Ç", "—Ç–µ–∫—Å—Ç", "–Ω–æ–º–µ—Ä", "–¥–∞—Ç–∞", "–¥–∞—Ç–∞", "—Ç–µ–∫—Å—Ç", "—Ç–µ–∫—Å—Ç", "–§–ò–û", "–§–ò–û –æ—Ç –ª–∏—Ü–∞", "—Å—Ç–æ–∏–º–æ—Å—Ç—å", "–¥–∞—Ç–∞"]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –æ–∂–∏–¥–∞–µ–º—ã–º
        if pattern.startswith("Choice"):
            if len(lines) == (expected_count - 1) or len(lines) == expected_count:
                for i, line in enumerate(lines):
                    if ":" in line:
                        colon_index = line.index(":")
                        info = line[colon_index + 1:].strip()

                        new_info_list.append(info)

                        error_message = validate_input(pattern, info, expected_types[i], i + 1)
                        if error_message:
                            error_messages.append(error_message)
                    else:
                        error_messages.append(f"–¢–µ–∫—Å—Ç –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç—É —à–∞–±–ª–æ–Ω–∞.‚ùå")
                        break
            else:
                error_messages.append(f"–û–∂–∏–¥–∞–µ—Ç—Å—è {expected_count} –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤, –Ω–æ –±—ã–ª–æ –≤–≤–µ–¥–µ–Ω–æ {len(lines)}.‚ùå")
        elif pattern.startswith('Pattern'):
            if len(lines) != expected_count:
                error_messages.append(f"–û–∂–∏–¥–∞–µ—Ç—Å—è {expected_count} –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤, –Ω–æ –±—ã–ª–æ –≤–≤–µ–¥–µ–Ω–æ {len(lines)}.‚ùå")
            else:
                for i, line in enumerate(lines):
                    if ":" in line:
                        colon_index = line.index(":")
                        info = line[colon_index + 1:].strip()  # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –ø–æ—Å–ª–µ –¥–≤–æ–µ—Ç–æ—á–∏—è

                        new_info_list.append(info)

                        error_message = validate_input(pattern, info, expected_types[i], i + 1)
                        if error_message:
                            error_messages.append(error_message)
                    else:
                        error_messages.append(f"–¢–µ–∫—Å—Ç –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç—É —à–∞–±–ª–æ–Ω–∞.‚ùå")
                        break

        print(new_file_path)
        if error_messages:
            print("–í–Ω—É—Ç—Ä–∏ states:", states)
            print("–í–Ω—É—Ç—Ä–∏ user_states:", user_states)
            if (states[chat_id].get("main_menu") != True):
                processing_active[chat_id] = True
                error_messages.append("–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É")
                send_pattern_message(chat_id, "\n".join(error_messages))
                bot.register_next_step_handler(message, filling_out_the_document)
        else:
            try:
                print(old_info_list, "/n")
                print(new_info_list, "/n")
                print(new_file_path, old_info_list, new_info_list, pattern)
                new_document_name = replace_text_in_docx(new_file_path, old_info_list, new_info_list, pattern)
                if new_document_name == "–æ—à–∏–±–∫–∞":
                    print("–í–Ω—É—Ç—Ä–∏ states:", states)
                    print("–í–Ω—É—Ç—Ä–∏ user_states:", user_states)
                    if (states[chat_id].get("main_menu") != True):
                        processing_active[chat_id] = True
                        send_pattern_message(chat_id, f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –≤ ¬´¬ª.‚ùå")
                        bot.register_next_step_handler(message, filling_out_the_document)
                else:
                    with open(new_document_name, "rb") as doc_file:
                        bot.send_document(message.chat.id, doc_file)
                        bot.register_next_step_handler(message, filling_out_the_document)
                    if pattern == 'Choice1':    
                        send_pattern_message(chat_id, f'–î–æ–≥–æ–≤–æ—Ä –ò–ü –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–∞—è —Ä–µ–∫–ª–∞–º–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —Ä–µ–∫–ª–∞–º—ã –±—ã–ª –∑–∞–ø–æ–ª–Ω–µ–Ω.‚úÖ')
                    elif pattern == 'Choice2':
                        send_pattern_message(chat_id, f'–û–û–û –î–æ–≥–æ–≤–æ—Ä —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–π —Ä–µ–∫–ª–∞–º—ã –±—ã–ª –∑–∞–ø–æ–ª–Ω–µ–Ω.‚úÖ')
                    elif pattern == 'Pattern2':
                        send_pattern_message(chat_id, f'–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ 1 –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∫–ª–∞–º—ã –±—ã–ª–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ.‚úÖ')
                    elif pattern == 'Pattern3':
                        send_pattern_message(chat_id, f'–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ 2 –í–≤–µ–¥–µ–Ω–∏–µ —Ä–µ–∫–ª–∞–º—ã –±—ã–ª–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ.‚úÖ')
                    elif pattern == 'Choice_1':
                        send_pattern_message(chat_id, f'–ò–ü –¥–æ–ø. —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ –∫ –¥–æ–≥–æ–≤–æ—Ä—É –±—ã–ª–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ.‚úÖ')
                    elif pattern == 'Choice_2':
                        send_pattern_message(chat_id, f'–û–û–û –¥–æ–ø. —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ –∫ –¥–æ–≥–æ–≤–æ—Ä—É –±—ã–ª–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ.‚úÖ')
            except Exception as e:
                send_pattern_message(chat_id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {str(e)}")
            finally:
                # –£–¥–∞–ª–∏—Ç–µ —Ñ–∞–π–ª, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                if os.path.exists(new_document_name):
                    try:
                        os.remove(new_document_name)  # –£–¥–∞–ª–∏—Ç–µ —Ñ–∞–π–ª —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –µ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è
                    except Exception as e:
                        bot.send_message(chat_id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {str(e)}")  

# –≤–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é
def send_pattern_message(chat_id, text):
    keyboard = telebot.types.InlineKeyboardMarkup()
    btn_back = telebot.types.InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é‚Ü©Ô∏è", callback_data='main_menu')
    keyboard.add(btn_back)
    bot.send_message(chat_id, text, reply_markup=keyboard)

# –∑–∞–ø—É—Å–∫
if __name__ == '__main__':
    bot.polling(none_stop=True)